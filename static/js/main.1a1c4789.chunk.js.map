{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CURRENCIES","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","accountCurrency","baseCurrency","quoteCurrency","action","currentPrice","tradePrice","numberOfUnits","closingPrice","profit","validated","showError","onClick","bind","assertThisInitialized","handleChange","e","_this2","_this$state","target","id","getRate","value","then","rate","setState","reg","RegExp","test","console","log","isFormValid","_this$state2","toFixed","base","quote","_this3","fetch","concat","resp","json","data","rates","catch","i","map","item","react_default","a","createElement","key","_this$state3","currencies","getCurrenciesAsOptions","_this$state4","profitValue","currentPriceValue","tradePriceValue","errorMessage","style","color","width","display","margin","marginTop","textAlign","Form","noValidate","Group","as","Row","controlId","Label","column","sm","Col","Control","onChange","required","plaintext","readOnly","Button","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a1c4789.chunk.js","sourcesContent":["import React from 'react';\nimport {Form, Row, Col, Button} from 'react-bootstrap';\n\nconst CURRENCIES = [\"\", \"AUD\",\"BGN\",\"BRL\",\"CAD\",\"CHF\",\"CNY\",\"CZK\",\"DKK\",\"EUR\",\n\"GBP\",\"HKD\",\"HRK\",\"HUF\",\"IDR\",\"ILS\",\"INR\",\"ISK\",\"JPY\",\"KRW\",\"MXN\",\"MYR\",\n\"NOK\",\"NZD\",\"PHP\",\"PLN\",\"RON\",\"RUB\",\"SEK\",\"SGD\",\"THB\",\"TRY\",\"USD\", \"ZAR\"];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountCurrency: \"\",\n      baseCurrency: \"\",\n      quoteCurrency: \"\",\n      action: \"Buy\",\n      currentPrice: \"\",\n      tradePrice: \"\",\n      numberOfUnits: \"\",\n      closingPrice: \"\",\n      profit: \"\",\n      validated: false,\n      showError: false\n    };\n    this.onClick = this.onClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const {accountCurrency, baseCurrency, quoteCurrency} = this.state;\n    switch (e.target.id) {\n      case \"AccountCurrency\": {\n        if (quoteCurrency) {\n          this.getRate(quoteCurrency, e.target.value)\n          .then((rate)=>{\n            this.setState({\n              currentPrice: rate\n            })\n          }) \n        }\n        this.setState({\n          accountCurrency: e.target.value,\n          profit: \"\",\n          showError: false\n        });\n        break;\n      }\n      case \"BaseCurrency\": {\n        if (quoteCurrency) {\n          this.getRate(e.target.value, quoteCurrency)\n          .then((rate)=>{\n            this.setState({\n              tradePrice: rate\n            })\n          }) \n        }\n        this.setState({\n          baseCurrency: e.target.value,\n          profit: \"\",\n          showError: false\n        });\n        break;\n      }\n      case \"QuoteCurrency\": {\n        if (accountCurrency) {\n          this.getRate(e.target.value, accountCurrency)\n          .then((rate)=>{\n            this.setState({\n              currentPrice: rate\n            })\n          }) \n        }\n        if (baseCurrency) {\n          this.getRate(baseCurrency, e.target.value)\n          .then((rate)=>{\n            this.setState({\n              tradePrice: rate\n            })\n          }) \n        }\n        this.setState({\n          quoteCurrency: e.target.value,\n          profit: \"\",\n          showError: false\n        });\n        break;\n      }\n      case \"Action\": {\n        this.setState({\n          action: e.target.value,\n          profit: \"\"\n        });\n        break;\n      }\n      case \"ClosingPrice\": {\n        const value = e.target.value;\n        const reg = new RegExp(/^([0-9]+([.][0-9]*)?|[.][0-9]+)$/);\n        if (value === '' || reg.test(value)) {\n          this.setState({\n            closingPrice: e.target.value,\n            profit: \"\"\n          });\n        }\n        break;\n      }\n      case \"NumberOfUnits\": {\n        const value = e.target.value;\n        const reg = new RegExp(/^([0-9]+([.][0-9]*)?|[.][0-9]+)$/);\n        if (value === '' || reg.test(value)) {\n          this.setState({\n            numberOfUnits: e.target.value,\n            profit: \"\"\n          });\n        }\n        break;\n      }\n      default:\n        console.log(\"Unhandled event\");\n    }\n  }\n\n  onClick() {\n    if (this.isFormValid()) {\n      const {action, currentPrice, tradePrice, numberOfUnits, closingPrice} = this.state;\n      let profit = (closingPrice - tradePrice) * currentPrice * numberOfUnits;\n      if (action === \"Sell\") profit = profit * -1;\n      profit = profit.toFixed(2);\n      this.setState({\n        validated: false,\n        profit\n      });\n    } else {\n      this.setState({\n        validated: true\n      });\n    }\n  }\n\n  getRate(base, quote) {\n    let promise = fetch(`https://api.exchangeratesapi.io/latest?base=${base}&symbols=${quote}`)\n    .then((resp) => resp.json())\n    .then((data) => data.rates[quote])\n    .catch((e)=>{\n      console.log(e);\n      this.setState({\n        showError: true\n      });\n    });\n    return promise;\n  }\n\n  getCurrenciesAsOptions()  {\n    let i = 0;\n    return CURRENCIES.map(item=><option key = {i++}>{item}</option>);\n  }\n\n  isFormValid() {\n    const {accountCurrency, baseCurrency, quoteCurrency, currentPrice, tradePrice, numberOfUnits, closingPrice} = this.state;\n    return (\n      accountCurrency\n      && baseCurrency\n      && quoteCurrency\n      && currentPrice\n      && tradePrice\n      && numberOfUnits\n      && closingPrice\n      );\n  }\n\n  render() {\n    const currencies = this.getCurrenciesAsOptions();\n    const {accountCurrency, baseCurrency, quoteCurrency, currentPrice, tradePrice, numberOfUnits, closingPrice, profit, validated, showError} = this.state;\n    const profitValue = (profit ? `${profit} ${accountCurrency}` : \"\");\n    const currentPriceValue = (currentPrice ? `${currentPrice} ${quoteCurrency}/${accountCurrency}` : \"\");\n    const tradePriceValue = (tradePrice ? `${tradePrice} ${baseCurrency}/${quoteCurrency}` : \"\");\n    const errorMessage = <p style={{color:\"red\"}}>Server connection error</p>;\n    return (\n      <div\n      style={{width:\"400px\",\n              display:\"block\",\n              margin:\"auto\",\n              marginTop:\"50px\"}}\n      >\n        <h3 style={{textAlign:\"center\",\n        margin:\"20px\"\n        }}\n        >Profit calculator</h3>\n        <Form noValidate validated={validated}>\n          <Form.Group as={Row} controlId=\"AccountCurrency\">\n            <Form.Label column sm={5}>\n              Account currency\n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control \n                as=\"select\"\n                onChange={this.handleChange}\n                required\n              >\n                {currencies}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"BaseCurrency\">\n            <Form.Label column sm={5}>\n              Base Currency\n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control \n                as=\"select\"\n                onChange={this.handleChange}\n                required\n              >\n                {currencies}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"QuoteCurrency\">\n            <Form.Label column sm={5}>\n              Quote Currency\n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control \n                as=\"select\"\n                onChange={this.handleChange}\n                required  \n              >\n                {currencies}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"CurrenctPrice\">\n            <Form.Label column sm={5}>\n              Current price\n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control plaintext readOnly value={currentPriceValue} />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"TradePrice\">\n            <Form.Label column sm={5}>\n              TradePrice\n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control plaintext readOnly value={tradePriceValue} />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"Action\">\n            <Form.Label column sm={5}>\n              Action\n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control \n              as=\"select\"\n              onChange={this.handleChange}>\n                <option>Buy</option>\n                <option>Sell</option>\n              </Form.Control>\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"ClosingPrice\">\n            <Form.Label column sm={5}>\n              Closing price\n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control\n              value = {closingPrice}\n              onChange={this.handleChange}\n              required\n              />\n            </Col>\n          </Form.Group>\n          \n\n          <Form.Group as={Row} controlId=\"NumberOfUnits\" >\n            <Form.Label column sm={5}>\n              Number of units\n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control\n                value = {numberOfUnits}\n                onChange={this.handleChange}\n                required\n              />\n            </Col>\n          </Form.Group>\n          \n          <Form.Group>\n              <Button\n              type=\"button\"\n              onClick={this.onClick}\n              id=\"calculate-result-btn\"\n              style={{\n              display:\"block\",\n              margin:\"auto\"}}\n              >Calculate</Button>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"Profit\">\n            <Form.Label column sm={5}>\n              Profit \n            </Form.Label>\n            <Col sm={7}>\n              <Form.Control plaintext readOnly value={profitValue} />\n            </Col>\n          </Form.Group>\n\n          {showError ? errorMessage : null}\n        </Form> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}